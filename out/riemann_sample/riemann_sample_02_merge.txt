	in_params = [i/dl, i/ul, i/vl, i/wl, i/pl, i/cl, i/dr, i/ur, i/vr, i/wr, i/pr, i/cr, i/pm, i/um]
	out_params = [o/d, o/u, o/v, o/w, o/p]

START STOP CFG Node 0 (cnt = 100):
     0. fload  i/dl         ->   r0          (pred = [], succ = [])
     1. fload  i/ul         ->   r1          (pred = [], succ = [])
     2. fload  i/vl         ->   r2          (pred = [], succ = [])
     3. fload  i/wl         ->   r3          (pred = [], succ = [])
     4. fload  i/pl         ->   r4          (pred = [], succ = [])
     5. fload  i/cl         ->   r5          (pred = [], succ = [])
     6. fload  i/dr         ->   r6          (pred = [], succ = [])
     7. fload  i/ur         ->   r7          (pred = [], succ = [])
     8. fload  i/vr         ->   r8          (pred = [], succ = [])
     9. fload  i/wr         ->   r9          (pred = [], succ = [])
    10. fload  i/pr         ->  r10          (pred = [], succ = [])
    11. fload  i/cr         ->  r11          (pred = [], succ = [])
    12. fload  i/pm         ->  r12          (pred = [], succ = [])
    13. fload  i/um         ->  r13          (pred = [], succ = [22. fcmplte])
    14. fmov    c.1,  r25                    (pred = [], succ = [])
    15. fmov    c.2,  r26                    (pred = [], succ = [])
    16. fmov    c.3,  r27                    (pred = [], succ = [])
    17. fmov    c.4,  r28                    (pred = [], succ = [])
    18. fmov    c.5,  r29                    (pred = [], succ = [])
    19. fmov    c.6,  r30                    (pred = [], succ = [])
    20. fmov    c.7,  r31                    (pred = [], succ = [])
    21. fmov    c.8,  r32                    (pred = [], succ = [])
    22. fcmplte c.0.0,  r13  ->   p0          (pred = [13. fload ], succ = [23. jump  , 91. jump  ])
    160. pmov     p0         ->   p9          (pred = [], succ = [])
    24. fstore   r2,  o/v           ?   p9   (pred = [], succ = [])
    25. fstore   r3,  o/w           ?   p9   (pred = [], succ = [])
    26. fcmplte  r12,   r4   ->   p1 ?   p9   (pred = [], succ = [27. jump  , 68. jump  ])
    162. pandn    p9,   p1   ->  p11          (pred = [], succ = [])
    161. pand     p9,   p1   ->  p10          (pred = [], succ = [])
    163. pmov    p10         ->  p12          (pred = [], succ = [])
    28. fsub     r1,   r5   ->  r33 ?  p12   (pred = [], succ = [29. fmov  ])
    29. fmov    r33,  r19           ?  p12   (pred = [28. fsub  ], succ = [])
    30. fcmplte c.0.0,  r19  ->   p2 ?  p12   (pred = [], succ = [31. jump  , 35. jump  ])
    165. pandn   p12,   p2   ->  p14          (pred = [], succ = [])
    164. pand    p12,   p2   ->  p13          (pred = [], succ = [])
    166. pmov    p13         ->  p15          (pred = [], succ = [])
    32. fstore   r0,  o/d           ?  p15   (pred = [], succ = [])
    33. fstore   r1,  o/u           ?  p15   (pred = [], succ = [])
    34. fstore   r4,  o/p           ?  p15   (pred = [], succ = [])
    167. pmov    p14         ->  p16          (pred = [], succ = [])
    36. fdiv    r12,   r4   ->  r34 ?  p16   (pred = [], succ = [37. fpow  ])
    37. fpow    r34,  r25   ->  r35 ?  p16   (pred = [36. fdiv  ], succ = [38. fmul  ])
    38. fmul     r5,  r35   ->  r36 ?  p16   (pred = [37. fpow  ], succ = [39. fmov  ])
    39. fmov    r36,  r15           ?  p16   (pred = [38. fmul  ], succ = [])
    40. fsub    r13,  r15   ->  r37 ?  p16   (pred = [], succ = [41. fmov  ])
    41. fmov    r37,  r23           ?  p16   (pred = [40. fsub  ], succ = [])
    42. fcmpge c.0.0,  r23  ->   p3 ?  p16   (pred = [], succ = [43. jump  , 51. jump  ])
    169. pandn   p16,   p3   ->  p18          (pred = [], succ = [])
    168. pand    p16,   p3   ->  p17          (pred = [], succ = [])
    170. pmov    p17         ->  p19          (pred = [], succ = [])
    44. fdiv    r12,   r4   ->  r38 ?  p19   (pred = [], succ = [46. fpow  ])
    45. fdiv   c.1.0,  r32  ->  r39 ?  p19   (pred = [], succ = [46. fpow  ])
    46. fpow    r38,  r39   ->  r40 ?  p19   (pred = [44. fdiv  , 45. fdiv  ], succ = [47. fmul  ])
    47. fmul     r0,  r40   ->  r41 ?  p19   (pred = [46. fpow  ], succ = [48. fstore])
    48. fstore  r41,  o/d           ?  p19   (pred = [47. fmul  ], succ = [])
    49. fstore  r13,  o/u           ?  p19   (pred = [], succ = [])
    50. fstore  r12,  o/p           ?  p19   (pred = [], succ = [])
    171. pmov    p18         ->  p20          (pred = [], succ = [])
    52. fmul    r31,   r1   ->  r42 ?  p20   (pred = [], succ = [53. fadd  ])
    53. fadd     r5,  r42   ->  r43 ?  p20   (pred = [52. fmul  ], succ = [54. fmul  ])
    54. fmul    r29,  r43   ->  r44 ?  p20   (pred = [53. fadd  ], succ = [55. fstore])
    55. fstore  r44,  o/u           ?  p20   (pred = [54. fmul  ], succ = [])
    56. fmul    r31,   r1   ->  r45 ?  p20   (pred = [], succ = [57. fadd  ])
    57. fadd     r5,  r45   ->  r46 ?  p20   (pred = [56. fmul  ], succ = [58. fmul  ])
    58. fmul    r29,  r46   ->  r47 ?  p20   (pred = [57. fadd  ], succ = [59. fmov  ])
    59. fmov    r47,  r14           ?  p20   (pred = [58. fmul  ], succ = [])
    60. fdiv    r14,   r5   ->  r48 ?  p20   (pred = [], succ = [61. fpow  ])
    61. fpow    r48,  r28   ->  r49 ?  p20   (pred = [60. fdiv  ], succ = [62. fmul  ])
    62. fmul     r0,  r49   ->  r50 ?  p20   (pred = [61. fpow  ], succ = [63. fstore])
    63. fstore  r50,  o/d           ?  p20   (pred = [62. fmul  ], succ = [])
    64. fdiv    r14,   r5   ->  r51 ?  p20   (pred = [], succ = [65. fpow  ])
    65. fpow    r51,  r27   ->  r52 ?  p20   (pred = [64. fdiv  ], succ = [66. fmul  ])
    66. fmul     r4,  r52   ->  r53 ?  p20   (pred = [65. fpow  ], succ = [67. fstore])
    67. fstore  r53,  o/p           ?  p20   (pred = [66. fmul  ], succ = [])
    172. pmov    p11         ->  p21          (pred = [], succ = [])
    69. fdiv    r12,   r4   ->  r54 ?  p21   (pred = [], succ = [70. fmov  ])
    70. fmov    r54,  r17           ?  p21   (pred = [69. fdiv  ], succ = [])
    71. fmul    r26,  r17   ->  r55 ?  p21   (pred = [], succ = [72. fadd  ])
    72. fadd    r55,  r25   ->  r56 ?  p21   (pred = [71. fmul  ], succ = [73. fsqrt ])
    73. fsqrt   r56         ->  r57 ?  p21   (pred = [72. fadd  ], succ = [74. fmul  ])
    74. fmul     r5,  r57   ->  r58 ?  p21   (pred = [73. fsqrt ], succ = [75. fsub  ])
    75. fsub     r1,  r58   ->  r59 ?  p21   (pred = [74. fmul  ], succ = [76. fmov  ])
    76. fmov    r59,  r21           ?  p21   (pred = [75. fsub  ], succ = [])
    77. fcmplte c.0.0,  r21  ->   p4 ?  p21   (pred = [], succ = [78. jump  , 82. jump  ])
    174. pandn   p21,   p4   ->  p23          (pred = [], succ = [])
    173. pand    p21,   p4   ->  p22          (pred = [], succ = [])
    175. pmov    p22         ->  p24          (pred = [], succ = [])
    79. fstore   r0,  o/d           ?  p24   (pred = [], succ = [])
    80. fstore   r1,  o/u           ?  p24   (pred = [], succ = [])
    81. fstore   r4,  o/p           ?  p24   (pred = [], succ = [])
    176. pmov    p23         ->  p25          (pred = [], succ = [])
    83. fadd    r17,  r30   ->  r60 ?  p25   (pred = [], succ = [84. fmul  ])
    84. fmul     r0,  r60   ->  r61 ?  p25   (pred = [83. fadd  ], succ = [87. fdiv  ])
    85. fmul    r17,  r30   ->  r62 ?  p25   (pred = [], succ = [86. fadd  ])
    86. fadd    r62, c.1.0  ->  r63 ?  p25   (pred = [85. fmul  ], succ = [87. fdiv  ])
    87. fdiv    r61,  r63   ->  r64 ?  p25   (pred = [84. fmul  , 86. fadd  ], succ = [88. fstore])
    88. fstore  r64,  o/d           ?  p25   (pred = [87. fdiv  ], succ = [])
    89. fstore  r13,  o/u           ?  p25   (pred = [], succ = [])
    90. fstore  r12,  o/p           ?  p25   (pred = [], succ = [])
    177. pnot     p0         ->  p26          (pred = [], succ = [])
    92. fstore   r8,  o/v           ?  p26   (pred = [], succ = [])
    93. fstore   r9,  o/w           ?  p26   (pred = [], succ = [])
    94. fcmpge  r12,  r10   ->   p5 ?  p26   (pred = [], succ = [95. jump  , 118. jump  ])
    179. pandn   p26,   p5   ->  p28          (pred = [], succ = [])
    178. pand    p26,   p5   ->  p27          (pred = [], succ = [])
    180. pmov    p27         ->  p29          (pred = [], succ = [])
    96. fdiv    r12,  r10   ->  r65 ?  p29   (pred = [], succ = [97. fmov  ])
    97. fmov    r65,  r18           ?  p29   (pred = [96. fdiv  ], succ = [])
    98. fmul    r26,  r18   ->  r66 ?  p29   (pred = [], succ = [99. fadd  ])
    99. fadd    r66,  r25   ->  r67 ?  p29   (pred = [98. fmul  ], succ = [100. fsqrt ])
    100. fsqrt   r67         ->  r68 ?  p29   (pred = [99. fadd  ], succ = [101. fmul  ])
    101. fmul    r11,  r68   ->  r69 ?  p29   (pred = [100. fsqrt ], succ = [102. fadd  ])
    102. fadd     r7,  r69   ->  r70 ?  p29   (pred = [101. fmul  ], succ = [103. fmov  ])
    103. fmov    r70,  r22           ?  p29   (pred = [102. fadd  ], succ = [])
    104. fcmpge c.0.0,  r22  ->   p6 ?  p29   (pred = [], succ = [105. jump  , 109. jump  ])
    182. pandn   p29,   p6   ->  p31          (pred = [], succ = [])
    181. pand    p29,   p6   ->  p30          (pred = [], succ = [])
    183. pmov    p30         ->  p32          (pred = [], succ = [])
    106. fstore   r6,  o/d           ?  p32   (pred = [], succ = [])
    107. fstore   r7,  o/u           ?  p32   (pred = [], succ = [])
    108. fstore  r10,  o/p           ?  p32   (pred = [], succ = [])
    184. pmov    p31         ->  p33          (pred = [], succ = [])
    110. fadd    r18,  r30   ->  r71 ?  p33   (pred = [], succ = [111. fmul  ])
    111. fmul     r6,  r71   ->  r72 ?  p33   (pred = [110. fadd  ], succ = [114. fdiv  ])
    112. fmul    r18,  r30   ->  r73 ?  p33   (pred = [], succ = [113. fadd  ])
    113. fadd    r73, c.1.0  ->  r74 ?  p33   (pred = [112. fmul  ], succ = [114. fdiv  ])
    114. fdiv    r72,  r74   ->  r75 ?  p33   (pred = [111. fmul  , 113. fadd  ], succ = [115. fstore])
    115. fstore  r75,  o/d           ?  p33   (pred = [114. fdiv  ], succ = [])
    116. fstore  r13,  o/u           ?  p33   (pred = [], succ = [])
    117. fstore  r12,  o/p           ?  p33   (pred = [], succ = [])
    185. pmov    p28         ->  p34          (pred = [], succ = [])
    119. fadd     r7,  r11   ->  r76 ?  p34   (pred = [], succ = [120. fmov  ])
    120. fmov    r76,  r20           ?  p34   (pred = [119. fadd  ], succ = [])
    121. fcmpge c.0.0,  r20  ->   p7 ?  p34   (pred = [], succ = [122. jump  , 126. jump  ])
    187. pandn   p34,   p7   ->  p36          (pred = [], succ = [])
    186. pand    p34,   p7   ->  p35          (pred = [], succ = [])
    188. pmov    p35         ->  p37          (pred = [], succ = [])
    123. fstore   r6,  o/d           ?  p37   (pred = [], succ = [])
    124. fstore   r7,  o/u           ?  p37   (pred = [], succ = [])
    125. fstore  r10,  o/p           ?  p37   (pred = [], succ = [])
    189. pmov    p36         ->  p38          (pred = [], succ = [])
    127. fdiv    r12,  r10   ->  r77 ?  p38   (pred = [], succ = [128. fpow  ])
    128. fpow    r77,  r25   ->  r78 ?  p38   (pred = [127. fdiv  ], succ = [129. fmul  ])
    129. fmul    r11,  r78   ->  r79 ?  p38   (pred = [128. fpow  ], succ = [130. fmov  ])
    130. fmov    r79,  r16           ?  p38   (pred = [129. fmul  ], succ = [])
    131. fadd    r13,  r16   ->  r80 ?  p38   (pred = [], succ = [132. fmov  ])
    132. fmov    r80,  r24           ?  p38   (pred = [131. fadd  ], succ = [])
    133. fcmplte c.0.0,  r24  ->   p8 ?  p38   (pred = [], succ = [134. jump  , 142. jump  ])
    191. pandn   p38,   p8   ->  p40          (pred = [], succ = [])
    190. pand    p38,   p8   ->  p39          (pred = [], succ = [])
    192. pmov    p39         ->  p41          (pred = [], succ = [])
    135. fdiv    r12,  r10   ->  r81 ?  p41   (pred = [], succ = [137. fpow  ])
    136. fdiv   c.1.0,  r32  ->  r82 ?  p41   (pred = [], succ = [137. fpow  ])
    137. fpow    r81,  r82   ->  r83 ?  p41   (pred = [135. fdiv  , 136. fdiv  ], succ = [138. fmul  ])
    138. fmul     r6,  r83   ->  r84 ?  p41   (pred = [137. fpow  ], succ = [139. fstore])
    139. fstore  r84,  o/d           ?  p41   (pred = [138. fmul  ], succ = [])
    140. fstore  r13,  o/u           ?  p41   (pred = [], succ = [])
    141. fstore  r12,  o/p           ?  p41   (pred = [], succ = [])
    193. pmov    p40         ->  p42          (pred = [], succ = [])
    143. unary_minus  r11         ->  r85 ?  p42   (pred = [], succ = [145. fadd  ])
    144. fmul    r31,   r7   ->  r86 ?  p42   (pred = [], succ = [145. fadd  ])
    145. fadd    r85,  r86   ->  r87 ?  p42   (pred = [143. unary_minus, 144. fmul  ], succ = [146. fmul  ])
    146. fmul    r29,  r87   ->  r88 ?  p42   (pred = [145. fadd  ], succ = [147. fstore])
    147. fstore  r88,  o/u           ?  p42   (pred = [146. fmul  ], succ = [])
    148. fmul    r31,   r7   ->  r89 ?  p42   (pred = [], succ = [149. fsub  ])
    149. fsub    r11,  r89   ->  r90 ?  p42   (pred = [148. fmul  ], succ = [150. fmul  ])
    150. fmul    r29,  r90   ->  r91 ?  p42   (pred = [149. fsub  ], succ = [151. fmov  ])
    151. fmov    r91,  r14           ?  p42   (pred = [150. fmul  ], succ = [])
    152. fdiv    r14,  r11   ->  r92 ?  p42   (pred = [], succ = [153. fpow  ])
    153. fpow    r92,  r28   ->  r93 ?  p42   (pred = [152. fdiv  ], succ = [154. fmul  ])
    154. fmul     r6,  r93   ->  r94 ?  p42   (pred = [153. fpow  ], succ = [155. fstore])
    155. fstore  r94,  o/d           ?  p42   (pred = [154. fmul  ], succ = [])
    156. fdiv    r14,  r11   ->  r95 ?  p42   (pred = [], succ = [157. fpow  ])
    157. fpow    r95,  r27   ->  r96 ?  p42   (pred = [156. fdiv  ], succ = [158. fmul  ])
    158. fmul    r10,  r96   ->  r97 ?  p42   (pred = [157. fpow  ], succ = [159. fstore])
    159. fstore  r97,  o/p           ?  p42   (pred = [158. fmul  ], succ = [])
Edges: 


=================================
Results compare:
	d: diff = [1879978.491682493, 876270.0360363242, 3782849.492456379, 585433.6661031246, 8462176.9699811, 1346109.2096043471, 19278679.915595666, 1898365.3353400787, 4543278.635697402, 1199435.4577090722, -72918.91987443576, 1247562.547151005, 661524.2360849815, 6907643.484623833, 452601.04763035954, 1132245.946335934, 919115.3784443774, 962990.4988753663, 3707589.0537524763, 430303.96647768584, 12203537.75009674, 67382.43644926952, 184358.0124182065, 1669770.9757067405, 2206099.259202879, 915224.3594370737, 400388.5927535816, -1754905.0612457225, 14195421.396403046, 448454.7164987075, 4093936.0006404812, 1634038.6045143923, 21278233.315161042, 419517.6802483034, 216313.8444624952, 2178207.7154747965, -2339800.0220773392, 1789212.7112734555, 353490.1682887463, 377342.1911204668, 683225.1471845541, 492260.96414384496, 1702800.4257283614, -82847.49042933853, 143537.45803697885, 1128918.1273798987, 527275.6739442818, 6233668.714607658, 695503.2982900187, -1247382.2619891444, 356877.1081044051, 1828939.4051924916, 2350128.609384834, 949133.3630403089, 8615059.37341713, 515866.260991587, 704711.8980661039, 886287.7509678365, 429364.93755929405, 13967.983057452366, 339108.3687726135, 561487.4048398978, 81560.03185087848, 309449.08424538124, 579585.5022795207, 131585.3026523743, -2688221.1215405846, 8237936.7053477885, 748815.1617729346, 1723085.7080160226, 278029.34825096, 291228.5569624251, -67275.49144772609, 346310.7881122958, 610427.3617225377, -2045059.5563667773, 884297.5693272065, 584072.9206800826, 1777685.0702564353, 291924.99400517746, 168185.45319795763, 1989443.4557614627, 350572.3198695937, 8567469.670880966, 1138915.085479219, 395993.2498413613, 1887492.0869319262, -513092.8285337942, 5379753.752329477, 2758029.8375647245, 2574124.774058928, 3700348.1108007072, 1672054.177100932, 438811.9979875975, 118615.09060526574, 144005.98093032526, 1658313.2237318594, 668914.5221004253, 8937861.607892588, 1600391.7758200755]
	u: diff = [38.2466773533678, 39.91038769155919, 42.6275934794823, 45.01123260350723, -9.80634161276307, 34.385437070515586, 61.04440154856487, 40.80981681471434, 47.20882405784082, 51.25395495779149, -1.4577175696249256, 58.92372155947089, 42.43997285362257, 49.54406370565137, 44.03636985851438, -8.451872592245415, 49.533215306331456, 50.74182126071989, 47.964057176256375, 33.7043465686726, 11.553338877811115, 25.514863150077847, 32.55501774085182, 34.09351480417738, 52.907059313617275, 33.670935952621285, 33.02183858645308, 4.834578001410321, 61.2761728560079, 31.204938495983992, 61.01092579967233, 55.47768368056076, 61.028728594609646, 33.04781431441673, 28.821506431681936, 55.17581707433932, -32.816895242467204, 55.61644347017972, 40.51849231202836, 33.009143100889, 32.876729888777255, 28.60332190767577, 55.69940910961825, -10.367917209184654, 31.831290435661586, 33.567980491446306, 34.32431593326774, 54.86365459340217, 28.123025949864445, 3.9981377430579315, 36.23119305973422, 46.37073436778311, 43.823127971598396, 57.11860685164621, 52.208440446792494, 33.12262865242126, 32.93635707599346, 51.05006743000512, 41.260373281025025, -4.8767226278340985, 39.861090240683936, 31.639218754117493, 29.67280109328859, 39.748798510512586, 36.77215580468393, 31.919578172819122, -11.543595931482166, 53.869535879952316, 49.21989416910627, 33.711657918365795, 34.27936050167143, 38.70635634716751, -13.668654417106396, 33.03763437260469, 42.13128628358026, -27.11707077585288, 52.89601001063041, 33.34122267900732, 43.307926466535896, 43.64954736230743, 26.94108853558433, 43.456022984494936, 44.1371259754878, 47.032122749888195, 32.63391575298863, 42.77809045567094, 55.234414740122915, -12.195731633357575, 60.086703683843886, 56.71326550012284, 44.3891533239871, 53.65058302755594, 30.73892964081283, 40.18959026496891, 33.92968914813563, 25.899245335559893, 42.62392073600251, 28.099377741040826, 60.149789528743874, 52.00485426219403]
	v: diff = [-0.05971944923556083, -0.011476858573738369, -0.5116190904193156, 0.22834161130854924, 0.0006194551415941163, -0.2951608428746446, 0.10841722448693947, 0.6346903280435876, 0.35350257108766425, 0.15719415734093878, 0.6448766739674685, -0.4561934423245373, -0.4000292154778551, 0.5220736594126276, 0.2847240979762602, -0.3546625134420043, -0.30945244516328985, 0.4543812968191314, 0.044282682257083206, 0.6112942664722625, 0.2168839430898073, -0.3480231571432679, -0.09496720441419981, 0.42334681616089265, 0.12091582932329858, 0.39048528913194414, 0.27348015485162125, -0.1012022510807451, -0.5060898098327395, -0.723577607476577, -0.3452784915250553, 0.06741696753644733, 0.6931998186069295, -0.6807167169337882, 0.6452164866223691, 0.18166663350703116, -0.06882652684485158, 0.00628877811777917, 0.045703893615794966, 0.6571213355603924, -0.4678889886575308, 0.5419278125192375, -0.0703665239007123, -0.050759360172205836, 0.3747747007616251, -0.26758016619888725, 0.19042367523675674, -0.831237106538111, -0.1050033399885053, -0.3014875471882097, -0.6782440347205727, -0.946463957310314, 0.003785275266621646, 0.35627013652081896, -0.7787416120224238, -0.3271102204596361, 0.7359233671032079, -0.9265764166642338, -0.1367325851254244, -0.28455477473877044, 0.30649996074577035, -0.7838759299478066, 0.2143478113197297, 0.30089592623675143, 0.39852282445290577, -0.6022247222530952, 0.17374908033439151, 0.19787104676208722, -0.5544138173794253, -0.06863970448694623, -0.41618239673778, 0.1459380569441746, 0.1711224126068409, 0.24781843784074353, 0.7052816704133695, -0.22751374297757465, 0.09330734200841029, -0.25726941782708956, -0.3373502293750017, -0.06511551101476454, 0.5835043807014846, 0.08312118936602508, -0.41631194070521205, -0.11848696856244989, -0.4804335350508748, 0.20895312357972706, -0.061625055571450815, -0.4043598280097962, 0.06988175140547903, -0.4805941618578662, -0.3334921890881286, -0.4938615854405908, -0.7697875037446738, 0.08403310923299223, -0.2877071429361475, 0.3771015835089653, -0.11636805938751871, 0.37939431291278747, 0.39279503755611755, -0.6641131394362056]
	w: diff = [-0.2591944685113361, 0.17750132218894055, 0.3700311033481374, 0.03882272833239897, 0.44820545476396356, -0.09089779177205815, 0.12046761048004284, -0.26202926969553153, -0.8466271877053642, 0.42470858179698356, 0.31068263719319344, -0.5043160642834037, 0.5161550844706795, 0.4876883138169159, -0.5767131187571914, 0.37962963768953295, 0.12101483684433867, 0.43916030880550094, -0.3328113670978148, 0.4006611312936075, -0.06717879865723164, -0.7433765246221811, 0.4162317696025841, 0.07808263424846307, -0.7824431177794304, -0.008339647741467004, 0.27505479600764104, -0.4382301863413627, -0.19753652050769932, -0.5172023002804935, -0.3130468689572321, 0.07774068476373497, -0.1296607972011714, 0.21616298029514547, 0.7578991453984416, -0.05639639017674569, -0.6277472570349629, -0.11000862897491492, -0.3611167332845848, 0.1894681906856528, -0.29011681780983567, -0.8971478629591925, -0.6894943188838867, -0.17197932203566246, 0.49173427549718984, 0.2832520925369071, 0.0803410364731103, 0.4782164450633164, 0.002568209085419104, 0.6099998330296641, -0.014358730119084395, -0.4395715341015527, 0.44534450362041333, -0.1204065511317367, -0.020881976474681263, 0.39261300656989384, 0.09513084630438806, 0.12898761088123512, 0.6370395687349253, -0.04948623103883176, 0.4513986197312929, -0.5956300117435245, 0.6624845189314179, -0.5407527811308093, -0.17262503796201, -0.06560401382304804, -0.3010630266114427, -0.17377934968994668, 0.03472722140419959, 0.07702557324196424, -0.07695806650868908, -0.6654693216924816, -0.35924650269019165, -0.2678571670090011, -0.07306749926269629, -0.327235784839655, 0.7223739920908323, -0.21074045858437995, -0.599725849696336, 0.2209171116562898, -0.13331542034403698, 0.6519936261513772, -0.28137879925867937, -0.2387361257329279, -0.35277058364578573, 0.4965673479654076, 0.5998591125080708, -0.144384313433501, -0.8019170406834897, -0.24773625797309595, -0.9685437481555002, -0.4845737374101191, -0.26255017330466446, -0.3410680729587052, -0.6580345479705421, -0.5206456935731751, -0.06231972800275476, -0.39442072769083536, 0.4189021490835805, 0.17212916159081093]
	p: diff = [-66321.24043870093, -49875.10282777655, -111550.53169357945, -30352.433024808786, -198781.13545358198, -51110.578382883185, -262922.11732664146, -56476.32718921612, -96735.23022427471, -43620.730475788674, -110091.12733011018, -36982.42668844351, -24666.263268815757, -210139.8548094092, -24843.16439734608, -79587.97616673622, -28154.53574243416, -32244.614965297696, -89906.15585190397, -16197.541896666004, -319059.4307521705, -3740.972393266983, -7425.509618477554, -63184.809187512816, -68457.04885588761, -22715.45201928269, -26987.02025404905, -125737.75346320783, -253815.3245428348, -13724.552477258243, -135420.76493550924, -46595.785426572824, -357575.3883189249, -25396.189499487158, -15147.713286261669, -69387.02440121779, -73934.50748598018, -73208.07103690591, -16537.99115775101, -19395.14030515595, -29299.294508848947, -17333.76985129979, -80183.50779268859, -58939.333775832274, -7551.252762525821, -48933.96280249811, -20047.902718649246, -174658.07089312852, -22181.16183395975, -157487.40882430924, -24579.89831666268, -46194.99445804768, -103707.3478703447, -51685.38247849359, -128919.14683846621, -22168.49030047575, -40561.835858045124, -44654.56610386279, -15953.989421820852, -121217.40278424663, -12120.35219970434, -21489.3340260819, -6508.298319872274, -25512.19939350953, -28946.641886323076, -7212.111849830333, -107167.46824313556, -115551.47230075161, -37274.82992354465, -45221.95425869507, -16942.994699320752, -15240.452300329407, -38024.14344688112, -19147.636328465884, -21776.665886775903, -87908.6586543999, -26534.4589726773, -16408.905113794142, -54950.149963616124, -21669.498089971767, -6001.1420220950495, -54000.21448227796, -23701.038186219106, -133266.02458325622, -52024.08010979774, -18139.252030264768, -43870.11192773483, -42414.33118851925, -111360.64432067356, -48192.57302746864, -85561.23321067539, -84724.43722284613, -50400.07279688727, -13777.835873095159, -10107.946279710133, -9253.510463195082, -58220.3081149603, -28768.730762640567, -235529.96914716825, -48476.60888928259]
Speedup:
	oc = 17600
	orig_oc = 4592
	speedup = 0.2609090909090909
