	in_params = [i/dl, i/ul, i/pl, i/cl, i/dr, i/ur, i/pr, i/cr]
	out_params = [o/pm]

START STOP CFG Node 0 (cnt = 100):
     0. fload  i/dl         ->   r0          (pred = [], succ = [16. fadd  ])
     1. fload  i/ul         ->   r1          (pred = [], succ = [23. fsub  ])
     2. fload  i/pl         ->   r2          (pred = [], succ = [21. fadd  , 33. fcmplt, 42. fcmpge])
     3. fload  i/cl         ->   r3          (pred = [], succ = [18. fadd  ])
     4. fload  i/dr         ->   r4          (pred = [], succ = [16. fadd  ])
     5. fload  i/ur         ->   r5          (pred = [], succ = [23. fsub  ])
     6. fload  i/pr         ->   r6          (pred = [], succ = [21. fadd  , 33. fcmplt, 42. fcmpge])
     7. fload  i/cr         ->   r7          (pred = [], succ = [18. fadd  ])
     8. fmov    c.1,  r20                    (pred = [], succ = [])
     9. fmov    c.2,  r21                    (pred = [], succ = [])
    10. fmov    c.3,  r22                    (pred = [], succ = [])
    11. fmov    c.4,  r23                    (pred = [], succ = [])
    12. fmov    c.5,  r24                    (pred = [], succ = [])
    13. fmov    c.6,  r25                    (pred = [], succ = [])
    14. fmov    c.7,  r26                    (pred = [], succ = [])
    15. fmov   c.2.0,  r18                   (pred = [], succ = [])
    16. fadd     r0,   r4   ->  r27          (pred = [ 0. fload ,  4. fload ], succ = [17. fmul  ])
    17. fmul   c.0.25,  r27 ->  r28          (pred = [16. fadd  ], succ = [19. fmul  ])
    18. fadd     r3,   r7   ->  r29          (pred = [ 3. fload ,  7. fload ], succ = [19. fmul  ])
    19. fmul    r28,  r29   ->  r30          (pred = [17. fmul  , 18. fadd  ], succ = [20. fmov  ])
    20. fmov    r30,   r8                    (pred = [19. fmul  ], succ = [])
    21. fadd     r2,   r6   ->  r31          (pred = [ 2. fload ,  6. fload ], succ = [22. fmul  ])
    22. fmul   c.0.5,  r31  ->  r32          (pred = [21. fadd  ], succ = [26. fadd  ])
    23. fsub     r1,   r5   ->  r33          (pred = [ 1. fload ,  5. fload ], succ = [24. fmul  ])
    24. fmul   c.0.5,  r33  ->  r34          (pred = [23. fsub  ], succ = [25. fmul  ])
    25. fmul    r34,   r8   ->  r35          (pred = [24. fmul  ], succ = [26. fadd  ])
    26. fadd    r32,  r35   ->  r36          (pred = [22. fmul  , 25. fmul  ], succ = [27. fmov  ])
    27. fmov    r36,  r13                    (pred = [26. fadd  ], succ = [])
    28. fcmpge  r13, c.0.0  ->   p0          (pred = [], succ = [29. jump  , 31. jump  ])
    33. fcmplt   r2,   r6   ->   p1          (pred = [ 2. fload ,  6. fload ], succ = [34. jump  , 36. jump  ])
    42. fcmpge   r2,   r6   ->   p4          (pred = [ 2. fload ,  6. fload ], succ = [43. jump  , 45. jump  ])
    51. fdiv    r11,  r12   ->  r37          (pred = [], succ = [52. fmov  ])
    52. fmov    r37,  r17                    (pred = [51. fdiv  ], succ = [])
    53. fcmplte  r17,  r18   ->   p7          (pred = [], succ = [55. pand  ])
    54. fcmplte  r12,  r13   ->   p8          (pred = [], succ = [55. pand  ])
    55. pand     p7,   p8   ->   p9          (pred = [53. fcmplte, 54. fcmplte], succ = [57. pand  ])
    56. fcmplte  r13,  r11   ->  p10          (pred = [], succ = [57. pand  ])
    57. pand     p9,  p10   ->  p11          (pred = [55. pand  , 56. fcmplte], succ = [58. jump  , 60. jump  ])
    120. pmov     p0         ->  p15          (pred = [], succ = [])
    30. fmov    r13,  r13           ?  p15   (pred = [], succ = [])
    38. fcmpge  c.1,  c.0   ->   p2 ?  p15   (pred = [], succ = [39. jump  ])
    121. pand    p15,   p2   ->  p16          (pred = [], succ = [])
    122. pnot     p0         ->  p17          (pred = [], succ = [])
    32. fmov   c.0.0,  r13          ?  p17   (pred = [], succ = [])
    40. fcmpge  c.1,  c.0   ->   p3 ?  p17   (pred = [], succ = [41. jump  ])
    123. pand    p17,   p3   ->  p18          (pred = [], succ = [])
    132. pmov    p18         ->  p27          (pred = [], succ = [])
    128. pmov    p16         ->  p23 ?  p27   (pred = [], succ = [])
    136. pand    p27,  p23   ->  p31          (pred = [], succ = [])
    133. pand    p27,  p23   ->  p28          (pred = [], succ = [])
    124. pmov     p1         ->  p19 ?  p28   (pred = [], succ = [])
    130. pand    p23,  p19   ->  p25 ?  p27   (pred = [], succ = [])
    135. pand    p27,  p25   ->  p30          (pred = [], succ = [])
    129. pand    p23,  p19   ->  p24 ?  p27   (pred = [], succ = [])
    134. pand    p27,  p24   ->  p29          (pred = [], succ = [])
    35. fmov     r2,  r12           ?  p29   (pred = [], succ = [])
    47. fcmpge  c.1,  c.0   ->   p5 ?  p30   (pred = [], succ = [48. jump  ])
    125. pand    p19,   p5   ->  p20 ?  p31   (pred = [], succ = [])
    131. pand    p23,  p20   ->  p26 ?  p27   (pred = [], succ = [])
    137. pand    p27,  p26   ->  p32          (pred = [], succ = [])
    126. pnot     p1         ->  p21          (pred = [], succ = [])
    37. fmov     r6,  r12           ?  p21   (pred = [], succ = [])
    49. fcmpge  c.1,  c.0   ->   p6 ?  p21   (pred = [], succ = [50. jump  ])
    127. pand    p21,   p6   ->  p22          (pred = [], succ = [])
    146. pmov    p22         ->  p41          (pred = [], succ = [])
    142. pmov    p32         ->  p37 ?  p41   (pred = [], succ = [])
    150. pand    p41,  p37   ->  p45          (pred = [], succ = [])
    147. pand    p41,  p37   ->  p42          (pred = [], succ = [])
    138. pmov     p4         ->  p33 ?  p42   (pred = [], succ = [])
    144. pand    p37,  p33   ->  p39 ?  p41   (pred = [], succ = [])
    149. pand    p41,  p39   ->  p44          (pred = [], succ = [])
    143. pand    p37,  p33   ->  p38 ?  p41   (pred = [], succ = [])
    148. pand    p41,  p38   ->  p43          (pred = [], succ = [])
    44. fmov     r2,  r11           ?  p43   (pred = [], succ = [])
    116. fcmpge  c.1,  c.0   ->  p13 ?  p44   (pred = [], succ = [117. jump  ])
    139. pand    p33,  p13   ->  p34 ?  p45   (pred = [], succ = [])
    145. pand    p37,  p34   ->  p40 ?  p41   (pred = [], succ = [])
    151. pand    p41,  p40   ->  p46          (pred = [], succ = [])
    140. pnot     p4         ->  p35          (pred = [], succ = [])
    46. fmov     r6,  r11           ?  p35   (pred = [], succ = [])
    118. fcmpge  c.1,  c.0   ->  p14 ?  p35   (pred = [], succ = [119. jump  ])
    141. pand    p35,  p14   ->  p36          (pred = [], succ = [])
    160. pmov    p36         ->  p55          (pred = [], succ = [])
    158. pmov    p46         ->  p53 ?  p55   (pred = [], succ = [])
    161. pand    p55,  p53   ->  p56          (pred = [], succ = [])
    152. pmov    p11         ->  p47 ?  p56   (pred = [], succ = [])
    159. pand    p53,  p47   ->  p54 ?  p55   (pred = [], succ = [])
    162. pand    p55,  p54   ->  p57          (pred = [], succ = [])
    59. fstore  r13, o/pm           ?  p57   (pred = [], succ = [])
    153. pnot    p11         ->  p48          (pred = [], succ = [])
    61. fcmplt  r13,  r12   ->  p12 ?  p48   (pred = [], succ = [62. jump  , 95. jump  ])
    155. pandn   p48,  p12   ->  p50          (pred = [], succ = [])
    154. pand    p48,  p12   ->  p49          (pred = [], succ = [])
    156. pmov    p49         ->  p51          (pred = [], succ = [])
    63. fdiv     r2,   r6   ->  r38 ?  p51   (pred = [], succ = [64. fpow  ])
    64. fpow    r38,  r20   ->  r39 ?  p51   (pred = [63. fdiv  ], succ = [65. fmov  ])
    65. fmov    r39,  r14           ?  p51   (pred = [64. fpow  ], succ = [])
    66. fmul    r14,   r1   ->  r40 ?  p51   (pred = [], succ = [67. fdiv  ])
    67. fdiv    r40,   r3   ->  r41 ?  p51   (pred = [66. fmul  ], succ = [69. fadd  ])
    68. fdiv     r5,   r7   ->  r42 ?  p51   (pred = [], succ = [69. fadd  ])
    69. fadd    r41,  r42   ->  r43 ?  p51   (pred = [67. fdiv  , 68. fdiv  ], succ = [72. fadd  ])
    70. fsub    r14, c.1.0  ->  r44 ?  p51   (pred = [], succ = [71. fmul  ])
    71. fmul    r23,  r44   ->  r45 ?  p51   (pred = [70. fsub  ], succ = [72. fadd  ])
    72. fadd    r43,  r45   ->  r46 ?  p51   (pred = [69. fadd  , 71. fmul  ], succ = [76. fdiv  ])
    73. fdiv    r14,   r3   ->  r47 ?  p51   (pred = [], succ = [75. fadd  ])
    74. fdiv   c.1.0,   r7  ->  r48 ?  p51   (pred = [], succ = [75. fadd  ])
    75. fadd    r47,  r48   ->  r49 ?  p51   (pred = [73. fdiv  , 74. fdiv  ], succ = [76. fdiv  ])
    76. fdiv    r46,  r49   ->  r50 ?  p51   (pred = [72. fadd  , 75. fadd  ], succ = [77. fmov  ])
    77. fmov    r50,  r19           ?  p51   (pred = [76. fdiv  ], succ = [])
    78. fsub     r1,  r19   ->  r51 ?  p51   (pred = [], succ = [79. fmul  ])
    79. fmul    r26,  r51   ->  r52 ?  p51   (pred = [78. fsub  ], succ = [80. fdiv  ])
    80. fdiv    r52,   r3   ->  r53 ?  p51   (pred = [79. fmul  ], succ = [81. fadd  ])
    81. fadd   c.1.0,  r53  ->  r54 ?  p51   (pred = [80. fdiv  ], succ = [82. fmov  ])
    82. fmov    r54,  r15           ?  p51   (pred = [81. fadd  ], succ = [])
    83. fsub    r19,   r5   ->  r55 ?  p51   (pred = [], succ = [84. fmul  ])
    84. fmul    r26,  r55   ->  r56 ?  p51   (pred = [83. fsub  ], succ = [85. fdiv  ])
    85. fdiv    r56,   r7   ->  r57 ?  p51   (pred = [84. fmul  ], succ = [86. fadd  ])
    86. fadd   c.1.0,  r57  ->  r58 ?  p51   (pred = [85. fdiv  ], succ = [87. fmov  ])
    87. fmov    r58,  r16           ?  p51   (pred = [86. fadd  ], succ = [])
    88. fmul     r2,  r15   ->  r59 ?  p51   (pred = [], succ = [89. fpow  ])
    89. fpow    r59,  r22   ->  r60 ?  p51   (pred = [88. fmul  ], succ = [92. fadd  ])
    90. fmul     r6,  r16   ->  r61 ?  p51   (pred = [], succ = [91. fpow  ])
    91. fpow    r61,  r22   ->  r62 ?  p51   (pred = [90. fmul  ], succ = [92. fadd  ])
    92. fadd    r60,  r62   ->  r63 ?  p51   (pred = [89. fpow  , 91. fpow  ], succ = [93. fmul  ])
    93. fmul   c.0.5,  r63  ->  r64 ?  p51   (pred = [92. fadd  ], succ = [94. fstore])
    94. fstore  r64, o/pm           ?  p51   (pred = [93. fmul  ], succ = [])
    157. pmov    p50         ->  p52          (pred = [], succ = [])
    96. fdiv    r24,   r0   ->  r65 ?  p52   (pred = [], succ = [99. fdiv  ])
    97. fmul    r25,   r2   ->  r66 ?  p52   (pred = [], succ = [98. fadd  ])
    98. fadd    r66,  r13   ->  r67 ?  p52   (pred = [97. fmul  ], succ = [99. fdiv  ])
    99. fdiv    r65,  r67   ->  r68 ?  p52   (pred = [96. fdiv  , 98. fadd  ], succ = [100. fsqrt ])
    100. fsqrt   r68         ->  r69 ?  p52   (pred = [99. fdiv  ], succ = [101. fmov  ])
    101. fmov    r69,   r9           ?  p52   (pred = [100. fsqrt ], succ = [])
    102. fdiv    r24,   r4   ->  r70 ?  p52   (pred = [], succ = [105. fdiv  ])
    103. fmul    r25,   r6   ->  r71 ?  p52   (pred = [], succ = [104. fadd  ])
    104. fadd    r71,  r13   ->  r72 ?  p52   (pred = [103. fmul  ], succ = [105. fdiv  ])
    105. fdiv    r70,  r72   ->  r73 ?  p52   (pred = [102. fdiv  , 104. fadd  ], succ = [106. fsqrt ])
    106. fsqrt   r73         ->  r74 ?  p52   (pred = [105. fdiv  ], succ = [107. fmov  ])
    107. fmov    r74,  r10           ?  p52   (pred = [106. fsqrt ], succ = [])
    108. fmul     r9,   r2   ->  r75 ?  p52   (pred = [], succ = [110. fadd  ])
    109. fmul    r10,   r6   ->  r76 ?  p52   (pred = [], succ = [110. fadd  ])
    110. fadd    r75,  r76   ->  r77 ?  p52   (pred = [108. fmul  , 109. fmul  ], succ = [112. fsub  ])
    111. fsub     r5,   r1   ->  r78 ?  p52   (pred = [], succ = [112. fsub  ])
    112. fsub    r77,  r78   ->  r79 ?  p52   (pred = [110. fadd  , 111. fsub  ], succ = [114. fdiv  ])
    113. fadd     r9,  r10   ->  r80 ?  p52   (pred = [], succ = [114. fdiv  ])
    114. fdiv    r79,  r80   ->  r81 ?  p52   (pred = [112. fsub  , 113. fadd  ], succ = [115. fstore])
    115. fstore  r81, o/pm           ?  p52   (pred = [114. fdiv  ], succ = [])
Edges: 


=================================
Results compare:
	pm: diff = [0.04947356106915368, -0.002523696497631178, -0.19760307214072137, -0.6079442191188402, -0.027639460438790175, -0.1631483268550986, 0.08285132306856335, 0.12152213802540979, 0.028790753713898942, 0.01980368219955886, 0.040929969009741884, 0.18617504435136467, 0.0719898606025009, 0.07176964059963398, -0.02071928251398103, -0.022975608809517878, 0.09467968324534182, -0.19828244668934736, -0.36765844057973807, -0.08376314292792753, 0.1258872967856901, -0.14499764422594352, -0.015810229560583977, 0.019194415502391093, -0.2257904543909739, -0.3731185239488979, -0.09610186506875595, -0.10703788492510946, -0.08116136723449818, 0.10930138658653688, 0.01757989503331636, 0.029517474670180732, -0.013655608339505187, 0.09144916527342173, 0.06968232892995996, -0.10645986834557908, 0.01141636195397755, 0.010886510606317179, -0.21902382706695245, -0.06740115318653261, -0.07207780228436333, 0.09700052000785342, -0.17407788119905176, -0.2742960589508807, 0.036433006979733173, -0.07635048393022692, -0.026447307767659467, -0.032577335563484855, -0.15138755007281524, 0.0447933705833784, 0.3483282589640997, -0.06502286751648967, 0.11216751744079279, 0.02400914416072686, 0.0056617550934821015, 0.04565600926126456, 0.2012980991153308, -0.12773863612374248, -0.0008303764221113674, -0.035583965255922, -0.018795664029094716, -0.01743447071399329, 0.08525430329383787, 0.23447909806097955, -0.03123290878841245, -0.034997214808354826, 0.06011707735971239, -0.07235091379686875, 0.026650964616570905, -0.17107099890216793, 0.09343399510589523, -0.3146578770507231, 0.24422578428243102, -0.15417827166876985, 0.04727260607917916, 0.22911810480936512, -0.03929807100532612, -0.034579559505360624, -0.18230350839313614, -0.06075261595803827, 0.09679938349584694, 0.11098313418832562, 0.09686834708184666, -0.03642378396653689, 0.026211862312453205, -0.0755229930627912, -0.12240933759042982, -0.2891027233433059, 0.014555289786726044, 0.12459931100320731, -0.06255044431274248, -0.5376185141543961, 0.1820797142844368, -0.04995644289278833, 0.182076334021126, 0.1906988990363646, 0.22635856367763574, -0.053142359013887974, 0.007652865744918413, 0.015710896263954277]
Speedup:
	oc = 14700
	orig_oc = 4000
	speedup = 0.272108843537415
